{
  Apply custom scripted filter for Atomic Shop Entitlements; generates Wiki Table
}
unit ApplyCustomScriptedFilter;
var
  sl: TStringList;
function Filter(d: IInterface): Boolean;
var entlString, lineEnd, etdiString: String;
begin
  Result := False;
  lineEnd := #13#10;
  entlString := '}}{{Infobox weapon FO76'+lineEnd;
etdiString := GetEditValue(ElementBySignature(d,'WEAP')); 
  entlString := entlString + '|games       =FO76'+lineEnd;
  entlString := entlString + '|atx         ='+GetEditValue(ElementByPath(d,'XALG/Atom Shop Item'))+lineEnd;
  entlString := entlString + '|fo1st       ='+GetEditValue(ElementByPath(d,'XALG/Fallout 1st'))+lineEnd;
  entlString := entlString + '|name        ='+GetEditValue(ElementBySignature(d,'FULL'))+lineEnd;
  entlString := entlString + '|subtitle    ='+lineEnd;
  entlString := entlString + '|label       ='+lineEnd;
  entlString := entlString + '|label2      ='+lineEnd;
  entlString := entlString + '|label3      ='+lineEnd;
  entlString := entlString + '|label4      ='+lineEnd;
  entlString := entlString + '|label5      ='+lineEnd;
  entlString := entlString + '|image       ='+lineEnd;
  entlString := entlString + '|image2      ='+lineEnd;
  entlString := entlString + '|image3      ='+lineEnd;
  entlString := entlString + '|image4      ='+lineEnd;
  entlString := entlString + '|image5      ='+lineEnd;
  entlString := entlString + '|image desc  ='+lineEnd;
  entlString := entlString + '|image desc2 ='+lineEnd;
  entlString := entlString + '|image desc3 ='+lineEnd;
  entlString := entlString + '|image desc4 ='+lineEnd;
  entlString := entlString + '|image desc5 ='+lineEnd;
  entlString := entlString + '|icon        ='+lineEnd;
  entlString := entlString + '|icon2       ='+lineEnd;
  entlString := entlString + '|icon3       ='+lineEnd;
  entlString := entlString + '|icon4       ='+lineEnd;
  entlString := entlString + '|icon5       ='+lineEnd;
  entlString := entlString + '|type        ='+lineEnd;
  entlString := entlString + '|class       ='+lineEnd;
  entlString := entlString + '|keywords    ='+GetEditValue(ElementByIndex(ElementBySignature(d,'KWDA'),0))+lineEnd;
  entlString := entlString + '|level       ='+GetEditValue(ElementByIndex(ElementBySignature(d,'EILV'),0))+lineEnd;
  entlString := entlString + '|damagetypes ='+GetEditValue(ElementByIndex(ElementBySignature(d,'DAMA'),0))+lineEnd;
  entlString := entlString + '|modslots    ='+GetEditValue(ElementByIndex(ElementBySignature(d,'APPR'),0))+lineEnd;
  entlString := entlString + '|leg         ='+lineEnd;
  entlString := entlString + '|legdrop     ='+lineEnd;
  entlString := entlString + '|legcraft    ='+lineEnd;
  entlString := entlString + '|damage      ='+lineEnd;
  entlString := entlString + '|explosion   ='+lineEnd;
  entlString := entlString + '|radius      =<!--''''Inner:'''' <br/>''''Outer:''''-->'+lineEnd;
  entlString := entlString + '|fire rate   ='+lineEnd;
  entlString := entlString + '|range       ='+lineEnd;
  entlString := entlString + '|accuracy    ='+lineEnd;
  entlString := entlString + '|perk dmg    ='+lineEnd;
  entlString := entlString + '|perk pen    ='+lineEnd;
  entlString := entlString + '|perk sneak  ='+lineEnd;
  entlString := entlString + '|perk mod    ='+lineEnd;
  entlString := entlString + '|perk leg    ='+lineEnd;
  entlString := entlString + '|perk craft  ='+lineEnd;
  entlString := entlString + '|perk craftm ='+lineEnd;
  entlString := entlString + '|perk repair ='+lineEnd;
  entlString := entlString + '|perk weight ='+lineEnd;
  entlString := entlString + '|modifiers   ='+lineEnd;
  entlString := entlString + '|plan        ='+lineEnd;
  entlString := entlString + '|craft       ='+lineEnd;
  entlString := entlString + '|scrap       ='+lineEnd;
  entlString := entlString + '|repair      ='+lineEnd;
  entlString := entlString + '|base type   ='+lineEnd;
  entlString := entlString + '|quests      ='+lineEnd;
  entlString := entlString + '|legendary   ='+lineEnd;
  entlString := entlString + '|special     ='+lineEnd;
  entlString := entlString + '|rarity      ='+lineEnd;
  entlString := entlString + '|sfxanim     ='+GetEditValue(ElementBySignature(d,'STCP'))+lineEnd;
  entlString := entlString + '|snap        ='+GetEditValue(ElementBySignature(d,'SNTP'))+lineEnd;
  entlString := entlString + '|invimg      ='+GetEditValue(ElementBySignature(d,'ICON'))+lineEnd;
  entlString := entlString + '|messageicon ='+GetEditValue(ElementBySignature(d,'MICO'))+lineEnd;
  entlString := entlString + '|objeffect   ='+GetEditValue(ElementBySignature(d,'EITM'))+lineEnd;
  entlString := entlString + '|enchtamount ='+GetEditValue(ElementBySignature(d,'EAMT'))+lineEnd;
  entlString := entlString + '|destructible='+GetEditValue(ElementBySignature(d,'Destructible'))+lineEnd;
  entlString := entlString + '|dmgtypcndscl='+GetEditValue(ElementBySignature(d,'DAMS'))+lineEnd;
  entlString := entlString + '|damagecurve ='+GetEditValue(ElementBySignature(d,'CVT0'))+lineEnd;
  entlString := entlString + '|bash2       ='+GetEditValue(ElementBySignature(d,'CVT3'))+lineEnd;
  entlString := entlString + '|speed       ='+GetEditValue(ElementBySignature(d,'MASE'))+lineEnd;
  entlString := entlString + '|ammo        ='+GetEditValue(ElementByPath(d,'DNAM/Ammo'))+lineEnd;
  entlString := entlString + '|attackspeed ='+GetEditValue(ElementByPath(d,'DNAM/Speed'))+lineEnd;
  entlString := entlString + '|reloadspeed ='+GetEditValue(ElementByPath(d,'DNAM/Reload Speed'))+lineEnd;
  entlString := entlString + '|npcrldspeed ='+GetEditValue(ElementByPath(d,'DNAM/NPC Reload Speed'))+lineEnd;
  entlString := entlString + '|reach       ='+GetEditValue(ElementByPath(d,'DNAM/Reach'))+lineEnd;
  entlString := entlString + '|minrange    ='+GetEditValue(ElementByPath(d,'DNAM/Min Range'))+lineEnd;
  entlString := entlString + '|maxrange    ='+GetEditValue(ElementByPath(d,'DNAM/Max Range'))+lineEnd;
  entlString := entlString + '|unkwnvar01  ='+GetEditValue(ElementByPath(d,'DNAM/Unknown'))+lineEnd;
  entlString := entlString + '|attack delay='+GetEditValue(ElementByPath(d,'DNAM/Attack Delay Seconds'))+lineEnd;
  entlString := entlString + '|oor         ='+GetEditValue(ElementByPath(d,'DNAM/Damage - OutOfRangeMult'))+lineEnd;
  entlString := entlString + '|onhit       ='+GetEditValue(ElementByPath(d,'DNAM/On Hit'))+lineEnd;
  entlString := entlString + '|skill       ='+GetEditValue(ElementByPath(d,'DNAM/Skill'))+lineEnd;
  entlString := entlString + '|resist      ='+GetEditValue(ElementByPath(d,'DNAM/Resist'))+lineEnd;
  entlString := entlString + '|oor         ='+GetEditValue(ElementByPath(d,'DNAM/Flags'))+lineEnd;
  entlString := entlString + '|clip size   ='+GetEditValue(ElementByPath(d,'DNAM/Capacity'))+lineEnd;
  entlString := entlString + '|wpntype     ='+GetEditValue(ElementByPath(d,'DNAM/Weapon Type'))+lineEnd;
  entlString := entlString + '|bash        ='+GetEditValue(ElementByPath(d,'DNAM/Secondary Damage'))+lineEnd;
  entlString := entlString + '|weight      ='+GetEditValue(ElementByPath(d,'DNAM/Weight'))+lineEnd;
  entlString := entlString + '|value       ='+GetEditValue(ElementByPath(d,'DNAM/Value'))+lineEnd;
  entlString := entlString + '|basedmg     ='+GetEditValue(ElementByPath(d,'DNAM/Base Damage'))+lineEnd;
  entlString := entlString + '|flagnpcammo ='+GetEditValue(ElementByPath(d,'DNAM/Flags/NPCs Use Ammo'))+lineEnd;
  entlString := entlString + '|flagjamrld  ='+GetEditValue(ElementByPath(d,'DNAM/Flags/No Jam After Reload'))+lineEnd;
  entlString := entlString + '|flagcharging='+GetEditValue(ElementByPath(d,'DNAM/Flags/Charging Reload'))+lineEnd;
  entlString := entlString + '|flagcrime   ='+GetEditValue(ElementByPath(d,'DNAM/Flags/Minor Crime'))+lineEnd;
  entlString := entlString + '|flagfixrange='+GetEditValue(ElementByPath(d,'DNAM/Flags/Fixed Range'))+lineEnd;
  entlString := entlString + '|flagnoncmbt ='+GetEditValue(ElementByPath(d,'DNAM/Flags/Not Used In Normal Combat'))+lineEnd;
  entlString := entlString + '|flagcriteff ='+GetEditValue(ElementByPath(d,'DNAM/Flags/Crit Effect - on Death'))+lineEnd;
  entlString := entlString + '|flagcharge  ='+GetEditValue(ElementByPath(d,'DNAM/Flags/Charging Attack'))+lineEnd;
  entlString := entlString + '|flagaltrmble='+GetEditValue(ElementByPath(d,'DNAM/Flags/Alternate Rumble'))+lineEnd;
  entlString := entlString + '|flaginput   ='+GetEditValue(ElementByPath(d,'DNAM/Flags/Hold Input To Power'))+lineEnd;
  entlString := entlString + '|flagnoaggro ='+GetEditValue(ElementByPath(d,'DNAM/Flags/Non Hostile'))+lineEnd;
  entlString := entlString + '|flagboundwpn='+GetEditValue(ElementByPath(d,'DNAM/Flags/Bound Weapon'))+lineEnd;
  entlString := entlString + '|flagignoredr='+GetEditValue(ElementByPath(d,'DNAM/Flags/Ignores Normal Weapon Resistance'))+lineEnd;
  entlString := entlString + '|flagauto    ='+GetEditValue(ElementByPath(d,'DNAM/Flags/Automatic'))+lineEnd;
  entlString := entlString + '|flagrepeat  ='+GetEditValue(ElementByPath(d,'DNAM/Flags/Repeatable Single Fire'))+lineEnd;
  entlString := entlString + '|flagnodrop  ='+GetEditValue(ElementByPath(d,'DNAM/Flags/Can''t Drop'))+lineEnd;
  entlString := entlString + '|flaghideback='+GetEditValue(ElementByPath(d,'DNAM/Flags/Hide Backpack'))+lineEnd;
  entlString := entlString + '|flagembedded='+GetEditValue(ElementByPath(d,'DNAM/Flags/Embedded Weapon'))+lineEnd;
  entlString := entlString + '|flagnonplay ='+GetEditValue(ElementByPath(d,'DNAM/Flags/Non Playable'))+lineEnd;
  entlString := entlString + '|flaghasscope='+GetEditValue(ElementByPath(d,'DNAM/Flags/Has Scope'))+lineEnd;
  entlString := entlString + '|flagbolt    ='+GetEditValue(ElementByPath(d,'DNAM/Flags/Bolt Action'))+lineEnd;
  entlString := entlString + '|flagsecndry ='+GetEditValue(ElementByPath(d,'DNAM/Flags/Seconday Weapon'))+lineEnd;
  entlString := entlString + '|flagnoshells='+GetEditValue(ElementByPath(d,'DNAM/Flags/Disable Shells'))+lineEnd;
  entlString := entlString + '|flagunkn28  ='+GetEditValue(ElementByPath(d,'DNAM/Flags/Unknown 28'))+lineEnd;
  entlString := entlString + '|sound level ='+GetEditValue(ElementByPath(d,'DNAM/Sound Data/Sound Level'))+lineEnd;
  entlString := entlString + '|sfxattack   ='+GetEditValue(ElementByPath(d,'DNAM/Sound Data/Sound - Attack'))+lineEnd;
  entlString := entlString + '|sfxprimed   ='+GetEditValue(ElementByPath(d,'DNAM/Sound Data/Sound - Throwable Primed'))+lineEnd;
  entlString := entlString + '|sfxloop     ='+GetEditValue(ElementByPath(d,'DNAM/Sound Data/Sound - Attack Loop'))+lineEnd;
  entlString := entlString + '|sfxfail     ='+GetEditValue(ElementByPath(d,'DNAM/Sound Data/Sound - Attack Fail'))+lineEnd;
  entlString := entlString + '|sfxidle     ='+GetEditValue(ElementByPath(d,'DNAM/Sound Data/Sound - Idle'))+lineEnd;
  entlString := entlString + '|sfxequip    ='+GetEditValue(ElementByPath(d,'DNAM/Sound Data/Sound - Equip Sound'))+lineEnd;
  entlString := entlString + '|sfxunequip  ='+GetEditValue(ElementByPath(d,'DNAM/Sound Data/Sound - UnEquip Sound'))+lineEnd;
  entlString := entlString + '|sfxfastequip='+GetEditValue(ElementByPath(d,'DNAM/Sound Data/Sound - Fast Equip Sound'))+lineEnd;
  entlString := entlString + '|accbonus    ='+GetEditValue(ElementByPath(d,'DNAM/Accuracy Bonus'))+lineEnd;
  entlString := entlString + '|attack time ='+GetEditValue(ElementByPath(d,'DNAM/Animation Attack Seconds'))+lineEnd;
  entlString := entlString + '|rank        ='+GetEditValue(ElementByPath(d,'DNAM/Rank'))+lineEnd;
  entlString := entlString + '|ap used     ='+GetEditValue(ElementByPath(d,'DNAM/Action Point Cost'))+lineEnd;
  entlString := entlString + '|charge      ='+GetEditValue(ElementByPath(d,'DNAM/Full Power Seconds'))+lineEnd;
  entlString := entlString + '|no charge   ='+GetEditValue(ElementByPath(d,'DNAM/Min Power Per Shot'))+lineEnd;
  entlString := entlString + '|stagger     ='+GetEditValue(ElementByPath(d,'DNAM/Stagger'))+lineEnd;
  entlString := entlString + '|colorindex  ='+GetEditValue(ElementByPath(d,'DNAM/Color Remapping Index'))+lineEnd;
  entlString := entlString + '|health      ='+GetEditValue(ElementByPath(d,'DNAM/Health'))+lineEnd;
  entlString := entlString + '|proj type   ='+GetEditValue(ElementByPath(d,'RGW3/Override Projectile'))+lineEnd;
  entlString := entlString + '|spinup      ='+GetEditValue(ElementByPath(d,'RGW3/Animation Fire Seconds'))+lineEnd;
  entlString := entlString + '|reload time ='+GetEditValue(ElementByPath(d,'RGW3/Animation Reload Seconds'))+lineEnd;
  entlString := entlString + '|bolt        ='+GetEditValue(ElementByPath(d,'RGW3/Bolt Draw Speed'))+lineEnd;
  entlString := entlString + '|sight       ='+GetEditValue(ElementByPath(d,'RGW3/Sighted Transition Seconds'))+lineEnd;
  entlString := entlString + '|unsight     ='+GetEditValue(ElementByPath(d,'RGW3/Unsighted Transition Seconds'))+lineEnd;
  entlString := entlString + '|draw        ='+GetEditValue(ElementByPath(d,'RGW3/Min Weapon Draw Time'))+lineEnd;
  entlString := entlString + '|dmgbonusmult='+GetEditValue(ElementByPath(d,'RGW3/Damage Bonus Multiplier'))+lineEnd;
  entlString := entlString + '|projectiles ='+GetEditValue(ElementByPath(d,'RGW3/# Projectiles'))+lineEnd;
  entlString := entlString + '|crit        ='+GetEditValue(ElementByPath(d,'CRDT/Crit Damage Mult'))+lineEnd;
  entlString := entlString + '|critcharge  ='+GetEditValue(ElementByPath(d,'CRDT/Crit Charge Bonus'))+lineEnd;
  entlString := entlString + '|criteffect  ='+GetEditValue(ElementByPath(d,'CRDT/Crit Effect'))+lineEnd;
  entlString := entlString + '|npcammoll   ='+GetEditValue(ElementBySignature(d,'LNAM'))+lineEnd;
  entlString := entlString + '|am          ='+GetEditValue(ElementBySignature(d,'WAMD'))+lineEnd;
  entlString := entlString + '|aam         ='+GetEditValue(ElementBySignature(d,'WAAM'))+lineEnd;
  entlString := entlString + '|zoom        ='+GetEditValue(ElementBySignature(d,'WZMD'))+lineEnd;
  entlString := entlString + '|equiptype   ='+GetEditValue(ElementBySignature(d,'ETYP'))+lineEnd;
  entlString := entlString + '|blockmat    ='+GetEditValue(ElementBySignature(d,'BAMT'))+lineEnd;
  entlString := entlString + '|sfxpickup   ='+GetEditValue(ElementBySignature(d,'YNAM'))+lineEnd;
  entlString := entlString + '|sfxputdwn   ='+GetEditValue(ElementBySignature(d,'ZNAM'))+lineEnd;
  entlString := entlString + '|sfxbreak    ='+GetEditValue(ElementBySignature(d,'ISBD'))+lineEnd;
  entlString := entlString + '|desc        ='+GetEditValue(ElementBySignature(d,'DESC'))+lineEnd;
  entlString := entlString + '|innr        ='+GetEditValue(ElementBySignature(d,'INRD'))+lineEnd;
  entlString := entlString + '|condition   ='+GetEditValue(ElementBySignature(d,'CVT1'))+lineEnd;
  entlString := entlString + '|condition2  ='+GetEditValue(ElementBySignature(d,'CVT2'))+lineEnd;
  entlString := entlString + '|condition3  ='+GetEditValue(ElementBySignature(d,'CVT4'))+lineEnd;
  entlString := entlString + '|impdata     ='+GetEditValue(ElementBySignature(d,'INAM'))+lineEnd;
  entlString := entlString + '|impblock    ='+GetEditValue(ElementBySignature(d,'BIDS'))+lineEnd;
  entlString := entlString + '|embeddedmod ='+GetEditValue(ElementBySignature(d,'NNAM'))+lineEnd;
  entlString := entlString + '|template    ='+GetEditValue(ElementBySignature(d,'CNAM'))+lineEnd;
  entlString := entlString + '|filter      ='+GetEditValue(ElementBySignature(d,'FLTR'))+lineEnd;
  entlString := entlString + '|currency    ='+GetEditValue(ElementBySignature(d,'VCRY'))+lineEnd;
  entlString := entlString + '|edid        ='+GetEditValue(ElementBySignature(d,'EDID'))+lineEnd;
  entlString := entlString + '|formid      ={{ID|'+IntToHex(FormID(d),8)+'}}';
   
  AddMessage(entlString);
  sl.Add(entlString);
  Result := True;
end;

function Initialize: Integer;
var
	fname, version: string;
begin
  FilterConflictAll := False;
  FilterConflictThis := False;
  FilterByInjectStatus := False;
  FilterInjectStatus := False;
  FilterByNotReachableStatus := False;
  FilterNotReachableStatus := False;
  FilterByReferencesInjectedStatus := False;
  FilterReferencesInjectedStatus := False;
  FilterByEditorID := False;
  FilterEditorID := '';
  FilterByName := False;
  FilterName := '';
  FilterByBaseEditorID := False;
  FilterBaseEditorID := '';
  FilterByBaseName := False;
  FilterBaseName := '';
  FilterScaledActors := False;
  FilterByPersistent := False;
  FilterPersistent := False;
  FilterUnnecessaryPersistent := False;
  FilterMasterIsTemporary := False;
  FilterIsMaster := False;
  FilterPersistentPosChanged := False;
  FilterDeleted := False;
  FilterByVWD := False;
  FilterVWD := False;
  FilterByHasVWDMesh := False;
  FilterHasVWDMesh := False;
  FilterBySignature := True;
  FilterSignatures := 'WEAP';
  FilterByBaseSignature := False;
  FilterBaseSignatures := '';
  FlattenBlocks := True;
  FlattenCellChilds := False;
  AssignPersWrldChild := False;
  InheritConflictByParent := True; // color conflicts
  FilterScripted := True; // use custom Filter() function
  sl := TStringList.Create;
  version := '1.5.0.19';

  ApplyFilter;
  
  fname := ProgramPath +'_'+version+'_WeaponInfoboxes.wikitext';
  sl.SaveToFile(fname);
  sl.Free;
  
  Result := 1;
end;

end.
